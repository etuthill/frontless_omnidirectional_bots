%check github

function [v_i] = agent_velocity(N, x, v, x_leader, v_leader)

k_c = 0.5;
k_a = 0.5;
k_s = 0.5;
k_x = 0.5;
k_v = 0.5;

% cohesion force on each agent (i) from neighbors (j)
F_cohesion(i) = k_c*(1/N(i) * sum(x(j) - x(i)));

% alignment force on each agent (i) from neighbors (j)
F_alignment(i) = k_a * (1/N(i) * sum(v(j) - v(i)));

% separation force on each agent (i) from neighbors (j)
F_separation(i) = k_s * (sum((x(i)-x(j))/abs(x(i)-x(j))^2));

% force on each agent (i) from leader
F_leader(i) = k_x * (x_leader - x(i)) + k_v * (v_leader - v(i));

% velocity on each agent (i)
v_i = F_cohesion + F_alignment + F_separation + F_leader;

% Parameters:

% Cohesion:
% k_c = cohesion force constant (int)
% N = number of neighbors (vec)
% x = agent position (vec)

% Alignment 
% k_a = alignment force constant (int)
% N = number of neighbors (vec)
% v = agent velocity (vec)

% Separation: 
% k_s = separation force constant (int)
% x = agent position (vec)

% Leader:
% k_p = position following force constant (int)
% k_v = velocity following force constant (int)
% x_leader = leader position (vec)
% v_leader = leader velocity (vec)
% x = agent position (vec)
% v = agent velocity (vec)

% Forces:
% F_cohesion = cohesion force (pull) (vec)
% F_alignment = alignment force (pull) (vec)
% F_separation = separation force (push) (vec)
% F_leader = force relating agent to leader (pull) (vec)